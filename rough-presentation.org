#+title: Using gRPC throughout a web application
* Requirements
- Python 3 (version 3.8.10)
- docker cli (version 20.10.17)
- docker-compose (version 1.29.2)
- bloom-rpc
- npm (version 8.1.2)
* Rough Steps
* Create the protobuf 
 #+begin_src bash
 supersummit-grpc/protobuf/western_movies.proto
 #+end_src
* Generating the server stubs (we will use python)
* Introduction: Namely
* Use Namely to generate server stubs
Normally grpcio and grpcio-tools module of python is recommended to be installed
** Pull Namely (Requirement: ensure docker pull capability)
#+begin_src bash
docker pull namely/protoc-all
#+end_src
** Run Namely to generate python stubs
#+begin_src bash
docker run -v <path to protobuf directory>:/defs namely/protoc-all -f western_movies.proto -l python

docker run -v /home/shwetank/code/supersummit/supersummit-grpc/protobuf:/defs namely/protoc-all -f western_movies.proto -l python
#+end_src
Two files will be generated.
- western_movies_pb2.py
- western_movies_pb2_grpc.py
We will be using these to serve gRPC
** Now we have a directory called python-server that will contain these generated files as well.
* Implementing the server
** In a production scenario we will package the generated files and publish it to our pip repository (we use a tool called Cloudsmith to host our repositories)
** Copy the generated files to the place where we want to implement the server. 
#+begin_src sh 
mkdir -p python-server
cp protobuf/gen/pb_python/western_movies_pb2.py python-server/
cp protobuf/gen/pb_python/western_movies_pb2_grpc.py python-server/
#+end_src
** Implement the server
#+begin_src sh
cd python-server
python3 -m pip install virtualenv
virtualenv ~/.pythonvirtualenvs/western-movies
source ~/.pythonvirtualenvs/western-movies/activate
pip install -r requirements.txt
touch western_movies_server.py
#+end_src

#+begin_src python
"""The Python implementation of the GRPC western_movies.WesternMoviesserver."""

from concurrent import futures
import logging

import grpc
import western_movies_pb2
import western_movies_pb2_grpc


class WesternMovies(western_movies_pb2_grpc.WesternMoviesServicer):

    def GetByName(self, request, context):
        return western_movies_pb2.MovieResponse(year='1966', topCast='Client Eastwood', overview='Best Western Ever!')


def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    western_movies_pb2_grpc.add_WesternMoviesServicer_to_server(WesternMovies(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    server.wait_for_termination()


if __name__ == '__main__':
    logging.basicConfig()
    serve()

#+end_src
** Run the server
#+begin_src bash
pop-os:~/code/supersummit/supersummit-grpc/python-server$ python western_movies_server.py 
#+end_src
** Implement the client (optional for testing only)
#+begin_src bash
touch western_movies_client.py
#+end_src

#+begin_src python
"""The Python implementation of the GRPC western_movies.WesternMovies client."""

from __future__ import print_function

import logging

import grpc
import western_movies_pb2
import western_movies_pb2_grpc


def run():
    with grpc.insecure_channel('localhost:50051') as channel:
        stub = western_movies_pb2_grpc.WesternMoviesStub(channel)
        response = stub.GetByName(western_movies_pb2.NameRequest(name='The Good, The Bad And The Ugly'))
    print("Western client received: ")
    print(response)


if __name__ == '__main__':
    logging.basicConfig()
    run()
#+end_src
* Introduction to Envoy and grpc-web
** Why does grpc-web <-> grpc require envoy to mediate?
* Setup envoy
** Setup docker-compose
#+begin_src yaml
version: "3.9"
services:
  envoy:
    # image: envoyproxy/envoy-alpine:v1.14-latest
    image: envoyproxy/envoy-alpine:v1.21-latest
    # networks:
    #   - moria
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 8080:8080
    volumes:
      - ./docker/conf/envoy.yaml:/etc/envoy/envoy.yaml
#+end_src
** Setup envoy configuration
#+begin_src bash
mkdir -p docker/conf
touch docker/conf/envoy.yaml
#+end_src

#+begin_src yaml
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              # - match: { prefix: "/grpc/" }
              - match: { prefix: "/" }
                route:
                  # prefix_rewrite: "/"
                  cluster: western_movie_server
                  timeout: 0s
              # - match: { prefix: "/" }
              #   route:
              #     cluster: western_movie_ui
              #     idle_timeout: 0s
              cors:
                allow_origin_string_match:
                - prefix: "*"
                allow_credentials: true
                allow_methods: GET, PUT, DELETE, POST, OPTIONS
                allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,token
                max_age: "1728000"
                expose_headers: custom-header-1,grpc-status,grpc-message
          http_filters:
          - name: envoy.filters.http.grpc_web
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
  - name: western_movie_server
    connect_timeout: 0.25s
    type: logical_dns
    http2_protocol_options: {}
    lb_policy: round_robin
    load_assignment:
      cluster_name: cluster_0
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: host.docker.internal
                    port_value: 50051
  # - name: western_movie_ui
  #   connect_timeout: 1000s
  #   type: logical_dns
  #   lb_policy: round_robin
  #   load_assignment:
  #     cluster_name: cluster_0
  #     endpoints:
  #       - lb_endpoints:
  #           - endpoint:
  #               address:
  #                 socket_address:
  #                   address: host.docker.internal
  #                   port_value: 3000


#+end_src
** Test with bloomRpc

** Talk about prefix re-write option. Show the diagram with benefits of serving api and frontend from the same host
* Setup frontend
** Generate definitions for grpc-web using Namely
#+begin_src bash
docker run -v /home/shwetank/code/supersummit/supersummit-grpc/protobuf:/defs namely/protoc-all -f western_movies.proto -l web
#+end_src

output will be generated in `supersummit-grpc/protobuf/gen/pb-web/`
** Pacakge the generated stuff into a npm package
The contents of this code block are in the file `supersummit-grpc/bin/package-grpc-web.sh` // TODO: run it
#+begin_src bash
cd supersummit-grpc/bin

rm -rf grpc-web-artifacts
mkdir grpc-web-artifacts
cp package.json grpc-web-artifacts/
cp publish.json grpc-web-artifacts/
cp -f ../protobuf/gen/pb-web/* ./grpc-web-artifacts/
cd grpc-web-artifacts
npm pack
#+end_src
** Talk about Nuxt
** Mention the concept of plugins in nuxt which we will use to configure services that speak with our backend. The following steps will vary from Framework to Framework but concepts remain the same.
*** Create a plugin that is executed before page is rendered
Talk about how plugins are executed before a page is rendered.

#+begin_src bash
mkdir -p plugins
touch plugins/grpcServices.ts
#+end_src

Add the following code to plugins
#+begin_src typescript
import { Plugin } from "@nuxt/types";

import { WesternMoviesClient } from "@superset/grpc-protobuf-client-js/Western_moviesServiceClientPb";

declare module "vue/types/vue" {
  interface Vue {
    $movieClient: WesternMoviesClient;
  }
}

const grpcServicePlugin: Plugin = (context, inject) => {
  const $movieClient = new WesternMoviesClient(context.env.baseUrl, null, {
    withCredentials: true
  })
  inject("movieClient", $movieClient)
}

export default grpcServicePlugin
#+end_src
*** Talk about the concept of baseUrl in context of Nuxt
Show the baseUrl value /grpc in nuxt.config.js. Explain that in this scenario accessing ui server from localhost:3000 will result in our WesternMoviesClient trying to make grpc calls to localhost:3000/grpc
*** Use the service we just injected in a page
Our index.vue now looks like
#+begin_src web
<template>
  <div class="container">
    <div class="detail"> Movie Name: {{movieName}} </div>
    <div class="detail"> Movie Overview: {{movieOverview}} </div>
    <div class="detail"> Top Cast: {{topCast}} </div>
    <div class="detail"> Year: {{year}} </div>
  </div>
</template>

<script lang="ts">
import { Component, Vue } from "nuxt-property-decorator";
import * as MoviesPb from "@superset/grpc-protobuf-client-js/western_movies_pb";

@Component({})
export default class Index extends Vue {

  protected movieName= ""
  protected movieOverview = ""
  protected topCast = ""
  protected year = ""

  fetch() {
    const request = new MoviesPb.NameRequest().setName("foobar");
    const response = this.$movieClient.getByName(request, null)
    response.then((value) => {
      this.movieOverview = value.getOverview();
      this.topCast = value.getTopcast();
      this.year = value.getYear();
    })
  }
}
</script>
<style scoped>
.detail {
    font-size: large;
    margin-left: 40%;
}
.container {
   margin-top: 10%;
}
</style>
#+end_src
*** Profit!
* Improvements to this setup


* Presenting improvements
- [ ] get org-babel to show properly highlighted code snippets - bash, python etc are looking off
- [ ] Get python code to render right in emacs
- [ ] Optional - Get vetur (vls) to work right with eglot

*
- clientTerm
- dockerTerm
- serverTerm

* 
